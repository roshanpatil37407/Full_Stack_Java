package com.DAO;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import com.model.Student;

public class StudentDAO {

    public static Connection getConnection() {
        Connection con = null;
        try {
            // Load MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            // Establish connection
            con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/may_servlet", "root", "root"
            );
            System.out.println("Database connected successfully!");
        } catch(Exception e) {
            e.printStackTrace();  // Shows full error in console
        }
        return con;
    }

    public static int insertStud(Student st) {
        int status = 0;
        try {
            Connection con = getConnection();
            if(con == null) {
                System.out.println("Connection is null. Cannot insert.");
                return 0;
            }
            String query = "INSERT INTO student(name, password, city, birthdate, email, phoneno) VALUES(?,?,?,?,?,?)";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, st.getName());
            ps.setString(2, st.getPassword());
            ps.setString(3, st.getCity());
            ps.setString(4, st.getBdate());
            ps.setString(5, st.getEmail());
            ps.setString(6, st.getPhoneno());
            status = ps.executeUpdate();
            con.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
        return status;
    }

    public static List<Student> getstudData() {
        List<Student> li = new ArrayList<>();
        try {
            Connection con = getConnection();
            if(con == null) return li;
            String query = "SELECT * FROM student";
            PreparedStatement ps = con.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            while(rs.next()) {
                Student s = new Student();
                s.setRollno(rs.getInt("Rollno"));
                s.setName(rs.getString("name"));
                s.setPassword(rs.getString("password"));
                s.setCity(rs.getString("city"));
                s.setBdate(rs.getString("birthdate"));
                s.setEmail(rs.getString("email"));
                s.setPhoneno(rs.getString("phoneno"));
                li.add(s);
            }
            con.close();
        } catch(Exception e) { e.printStackTrace(); }
        return li;
    }

    public static Student searchStudentByRollno(int Rollno) {
        Student st = new Student();
        try {
            Connection con = getConnection();
            if(con == null) return st;
            String query = "SELECT * FROM student WHERE Rollno=?";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setInt(1, Rollno);
            ResultSet rs = ps.executeQuery();
            if(rs.next()) {
                st.setRollno(rs.getInt("Rollno"));
                st.setName(rs.getString("name"));
                st.setPassword(rs.getString("password"));
                st.setCity(rs.getString("city"));
                st.setBdate(rs.getString("birthdate"));
                st.setEmail(rs.getString("email"));
                st.setPhoneno(rs.getString("phoneno"));
            }
            con.close();
        } catch(Exception e) { e.printStackTrace(); }
        return st;
    }

    public static int UpdateData(Student st) {
        int status = 0;
        try {
            Connection con = getConnection();
            if(con == null) return 0;
            String query = "UPDATE student SET name=?, password=?, city=?, birthdate=?, email=?, phoneno=? WHERE Rollno=?";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, st.getName());
            ps.setString(2, st.getPassword());
            ps.setString(3, st.getCity());
            ps.setString(4, st.getBdate());
            ps.setString(5, st.getEmail());
            ps.setString(6, st.getPhoneno());
            ps.setInt(7, st.getRollno());
            status = ps.executeUpdate();
            con.close();
        } catch(Exception e) { e.printStackTrace(); }
        return status;
    }

    public static int deleteStudent(int Rollno) {
        int status = 0;
        try {
            Connection con = getConnection();
            if(con == null) return 0;
            String query = "DELETE FROM student WHERE Rollno=?";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setInt(1, Rollno);
            status = ps.executeUpdate();
            con.close();
        } catch(Exception e) { e.printStackTrace(); }
        return status;
    }
}
